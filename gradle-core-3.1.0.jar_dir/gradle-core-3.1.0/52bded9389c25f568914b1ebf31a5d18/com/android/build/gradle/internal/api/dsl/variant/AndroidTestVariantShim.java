/*    */ package com.android.build.gradle.internal.api.dsl.variant; import com.android.build.gradle.internal.variant2.AndroidTestVariantImpl;
/*    */ 
/*    */ @kotlin.Metadata(mv={1, 1, 9}, bv={1, 0, 2}, k=1, d1={"\000Ü\001\n\002\030\002\n\002\030\002\n\000\n\002\030\002\n\002\b\002\n\002\030\002\n\002\b\003\n\002\020\016\n\002\b\005\n\002\020 \n\002\030\002\n\002\b\003\n\002\020!\n\002\030\002\n\002\b\006\n\002\030\002\n\002\b\003\n\002\020\013\n\002\b\005\n\002\030\002\n\002\b\006\n\002\030\002\n\002\b\006\n\002\030\002\n\002\b\005\n\002\030\002\n\002\b\003\n\002\030\002\n\002\b\006\n\002\030\002\n\002\b\003\n\002\020%\n\002\020\000\n\002\b\005\n\002\020\b\n\002\b\005\n\002\030\002\n\002\b\n\n\002\030\002\n\002\b\r\n\002\030\002\n\002\b\003\n\002\030\002\n\002\b \n\002\030\002\n\002\b\003\n\002\030\002\n\002\b\013\n\002\030\002\n\002\b\005\n\002\030\002\n\002\b\013\n\002\020\002\n\000\n\002\030\002\n\002\b\017\b\000\030\0002\0020\001B\017\b\000\022\006\020\002\032\0020\003¢\006\002\020\004J\032\020\005\032\0030·\0012\016\020¸\001\032\t\022\004\022\0020\0060¹\001H\001J%\020º\001\032\0030·\0012\007\020»\001\032\0020\n2\006\020m\032\0020\n2\007\020¼\001\032\0020\nH\001J\032\020\034\032\0030·\0012\016\020¸\001\032\t\022\004\022\0020\0350¹\001H\001J\032\020&\032\0030·\0012\016\020¸\001\032\t\022\004\022\0020'0¹\001H\001J\032\020-\032\0030·\0012\016\020¸\001\032\t\022\004\022\0020.0¹\001H\001J\033\020½\001\032\0030·\0012\016\020¸\001\032\t\022\004\022\002050¹\001H\001J\032\0204\032\0030·\0012\016\020¸\001\032\t\022\004\022\002050¹\001H\001J\032\020:\032\0030·\0012\016\020¸\001\032\t\022\004\022\0020;0¹\001H\001J\n\020¾\001\032\0020!H\001J\n\020¿\001\032\0020!H\001J\n\020À\001\032\0020!H\001J\n\020Á\001\032\0020!H\001J\n\020Â\001\032\0020!H\001J\n\020Ã\001\032\0020!H\001J\n\020Ä\001\032\0020!H\001J\032\020>\032\0030·\0012\016\020¸\001\032\t\022\004\022\0020?0¹\001H\001J\032\020E\032\0030·\0012\016\020¸\001\032\t\022\004\022\0020F0¹\001H\001J\022\020V\032\0030·\0012\006\020V\032\0020QH\001J\022\020V\032\0030·\0012\006\020V\032\0020\nH\001J\032\020j\032\0030·\0012\016\020¸\001\032\t\022\004\022\0020\0210¹\001H\001J\032\020o\032\0030·\0012\016\020¸\001\032\t\022\004\022\0020p0¹\001H\001J\032\020s\032\0030·\0012\016\020¸\001\032\t\022\004\022\0020t0¹\001H\001J%\020Å\001\032\0030·\0012\007\020»\001\032\0020\n2\006\020m\032\0020\n2\007\020¼\001\032\0020\nH\001J\022\020Z\032\0030·\0012\006\020V\032\0020QH\001J\022\020Z\032\0030·\0012\006\020V\032\0020\nH\001J\024\020 \001\032\0030·\0012\007\020\001\032\0020QH\001J\024\020 \001\032\0030·\0012\007\020\001\032\0020\nH\001J\034\020Æ\001\032\0030·\0012\017\020¸\001\032\n\022\005\022\0030\0010¹\001H\001J\024\020\001\032\0030·\0012\007\020\001\032\0020QH\001J\024\020\001\032\0030·\0012\007\020\001\032\0020\nH\001J\t\020Ç\001\032\0020\nH\026J\033\020¨\001\032\0030·\0012\016\020¸\001\032\t\022\004\022\0020\0210¹\001H\001J\034\020ª\001\032\0030·\0012\017\020¸\001\032\n\022\005\022\0030«\0010¹\001H\001R\022\020\005\032\0020\006X\005¢\006\006\032\004\b\007\020\bR\032\020\t\032\004\030\0010\nX\017¢\006\f\032\004\b\013\020\f\"\004\b\r\020\016R\030\020\017\032\b\022\004\022\0020\0210\020X\005¢\006\006\032\004\b\022\020\023R\036\020\024\032\b\022\004\022\0020\0260\025X\017¢\006\f\032\004\b\027\020\023\"\004\b\030\020\031R\022\020\032\032\0020\nX\005¢\006\006\032\004\b\033\020\fR\022\020\034\032\0020\035X\005¢\006\006\032\004\b\036\020\037R\030\020 \032\0020!X\017¢\006\f\032\004\b\"\020#\"\004\b$\020%R\022\020&\032\0020'X\005¢\006\006\032\004\b(\020)R\030\020*\032\0020!X\017¢\006\f\032\004\b+\020#\"\004\b,\020%R\022\020-\032\0020.X\005¢\006\006\032\004\b/\0200R\030\0201\032\0020!X\017¢\006\f\032\004\b2\020#\"\004\b3\020%R\022\0204\032\00205X\005¢\006\006\032\004\b6\0207R\030\0208\032\b\022\004\022\0020\n0\020X\005¢\006\006\032\004\b9\020\023R\022\020:\032\0020;X\005¢\006\006\032\004\b<\020=R\022\020>\032\0020?X\005¢\006\006\032\004\b@\020AR\030\020B\032\0020!X\017¢\006\f\032\004\bC\020#\"\004\bD\020%R\022\020E\032\0020FX\005¢\006\006\032\004\bG\020HR$\020I\032\016\022\004\022\0020\n\022\004\022\0020K0JX\017¢\006\f\032\004\bL\020M\"\004\bN\020OR\032\020P\032\004\030\0010QX\017¢\006\f\032\004\bR\020S\"\004\bT\020UR\032\020V\032\004\030\0010WX\017¢\006\f\032\004\bX\020Y\"\004\bZ\020[R\032\020\\\032\004\030\0010!X\017¢\006\f\032\004\b]\020^\"\004\b_\020`R\032\020a\032\004\030\0010bX\017¢\006\f\032\004\bc\020d\"\004\be\020fR\032\020g\032\004\030\0010bX\017¢\006\f\032\004\bh\020d\"\004\bi\020fR\024\020j\032\004\030\0010\021X\005¢\006\006\032\004\bk\020lR\022\020m\032\0020\nX\005¢\006\006\032\004\bn\020\fR\022\020o\032\0020pX\005¢\006\006\032\004\bq\020rR\022\020s\032\0020tX\005¢\006\006\032\004\bu\020vR\030\020w\032\0020!X\017¢\006\f\032\004\bx\020#\"\004\by\020%R\030\020z\032\0020!X\017¢\006\f\032\004\b{\020#\"\004\b|\020%R\032\020}\032\004\030\0010!X\017¢\006\f\032\004\b~\020^\"\004\b\020`R\035\020\001\032\0020QX\017¢\006\020\032\006\b\001\020\001\"\006\b\001\020\001R\035\020\001\032\004\030\0010!X\017¢\006\016\032\005\b\001\020^\"\005\b\001\020`R\035\020\001\032\004\030\0010!X\017¢\006\016\032\005\b\001\020^\"\005\b\001\020`R\035\020\001\032\004\030\0010QX\017¢\006\016\032\005\b\001\020S\"\005\b\001\020UR!\020\001\032\b\022\004\022\0020\n0\025X\017¢\006\016\032\005\b\001\020\023\"\005\b\001\020\031R!\020\001\032\b\022\004\022\0020\0260\025X\017¢\006\016\032\005\b\001\020\023\"\005\b\001\020\031R\026\020\001\032\0030\001X\005¢\006\b\032\006\b\001\020\001R \020\001\032\005\030\0010\001X\017¢\006\020\032\006\b\001\020\001\"\006\b\001\020\001R\035\020\001\032\004\030\0010WX\017¢\006\016\032\005\b\001\020Y\"\005\b \001\020[R\033\020¡\001\032\0020!X\017¢\006\016\032\005\b¢\001\020#\"\005\b£\001\020%R\026\020¤\001\032\0030¥\001X\005¢\006\b\032\006\b¦\001\020§\001R\026\020¨\001\032\004\030\0010\021X\005¢\006\007\032\005\b©\001\020lR\026\020ª\001\032\0030«\001X\005¢\006\b\032\006\b¬\001\020­\001R\035\020®\001\032\004\030\0010QX\017¢\006\016\032\005\b¯\001\020S\"\005\b°\001\020UR\035\020±\001\032\004\030\0010\nX\017¢\006\016\032\005\b²\001\020\f\"\005\b³\001\020\016R\033\020´\001\032\0020!X\017¢\006\016\032\005\bµ\001\020#\"\005\b¶\001\020%¨\006È\001"}, d2={"Lcom/android/build/gradle/internal/api/dsl/variant/AndroidTestVariantShim;", "Lcom/android/build/api/dsl/variant/AndroidTestVariant;", "internalObject", "Lcom/android/build/gradle/internal/variant2/AndroidTestVariantImpl;", "(Lcom/android/build/gradle/internal/variant2/AndroidTestVariantImpl;)V", "aaptOptions", "Lcom/android/build/api/dsl/options/AaptOptions;", "getAaptOptions", "()Lcom/android/build/api/dsl/options/AaptOptions;", "applicationId", "", "getApplicationId", "()Ljava/lang/String;", "setApplicationId", "(Ljava/lang/String;)V", "baseSourceSets", "", "Lcom/android/build/api/sourcesets/AndroidSourceSet;", "getBaseSourceSets", "()Ljava/util/List;", "buildConfigFields", "", "Lcom/android/build/api/dsl/model/TypedValue;", "getBuildConfigFields", "setBuildConfigFields", "(Ljava/util/List;)V", "buildTypeName", "getBuildTypeName", "compileOptions", "Lcom/android/build/api/dsl/options/CompileOptions;", "getCompileOptions", "()Lcom/android/build/api/dsl/options/CompileOptions;", "crunchPngs", "", "getCrunchPngs", "()Z", "setCrunchPngs", "(Z)V", "dataBinding", "Lcom/android/builder/model/DataBindingOptions;", "getDataBinding", "()Lcom/android/builder/model/DataBindingOptions;", "debuggable", "getDebuggable", "setDebuggable", "dexOptions", "Lcom/android/build/api/dsl/options/DexOptions;", "getDexOptions", "()Lcom/android/build/api/dsl/options/DexOptions;", "embedMicroApp", "getEmbedMicroApp", "setEmbedMicroApp", "externalNativeBuildOptions", "Lcom/android/build/api/dsl/options/ExternalNativeBuildOptions;", "getExternalNativeBuildOptions", "()Lcom/android/build/api/dsl/options/ExternalNativeBuildOptions;", "flavorNames", "getFlavorNames", "instrumentationOptions", "Lcom/android/build/api/dsl/options/InstrumentationOptions;", "getInstrumentationOptions", "()Lcom/android/build/api/dsl/options/InstrumentationOptions;", "javaCompileOptions", "Lcom/android/build/api/dsl/options/JavaCompileOptions;", "getJavaCompileOptions", "()Lcom/android/build/api/dsl/options/JavaCompileOptions;", "jniDebuggable", "getJniDebuggable", "setJniDebuggable", "lintOptions", "Lcom/android/build/api/dsl/options/LintOptions;", "getLintOptions", "()Lcom/android/build/api/dsl/options/LintOptions;", "manifestPlaceholders", "", "", "getManifestPlaceholders", "()Ljava/util/Map;", "setManifestPlaceholders", "(Ljava/util/Map;)V", "maxSdkVersion", "", "getMaxSdkVersion", "()Ljava/lang/Integer;", "setMaxSdkVersion", "(Ljava/lang/Integer;)V", "minSdkVersion", "Lcom/android/build/api/dsl/ApiVersion;", "getMinSdkVersion", "()Lcom/android/build/api/dsl/ApiVersion;", "setMinSdkVersion", "(Lcom/android/build/api/dsl/ApiVersion;)V", "multiDexEnabled", "getMultiDexEnabled", "()Ljava/lang/Boolean;", "setMultiDexEnabled", "(Ljava/lang/Boolean;)V", "multiDexKeepFile", "Ljava/io/File;", "getMultiDexKeepFile", "()Ljava/io/File;", "setMultiDexKeepFile", "(Ljava/io/File;)V", "multiDexKeepProguard", "getMultiDexKeepProguard", "setMultiDexKeepProguard", "multiFlavorSourceSet", "getMultiFlavorSourceSet", "()Lcom/android/build/api/sourcesets/AndroidSourceSet;", "name", "getName", "ndkOptions", "Lcom/android/build/api/dsl/options/NdkOptions;", "getNdkOptions", "()Lcom/android/build/api/dsl/options/NdkOptions;", "postProcessing", "Lcom/android/build/api/dsl/options/PostProcessingOptions;", "getPostProcessing", "()Lcom/android/build/api/dsl/options/PostProcessingOptions;", "pseudoLocalesEnabled", "getPseudoLocalesEnabled", "setPseudoLocalesEnabled", "renderscriptDebuggable", "getRenderscriptDebuggable", "setRenderscriptDebuggable", "renderscriptNdkModeEnabled", "getRenderscriptNdkModeEnabled", "setRenderscriptNdkModeEnabled", "renderscriptOptimLevel", "getRenderscriptOptimLevel", "()I", "setRenderscriptOptimLevel", "(I)V", "renderscriptSupportModeBlasEnabled", "getRenderscriptSupportModeBlasEnabled", "setRenderscriptSupportModeBlasEnabled", "renderscriptSupportModeEnabled", "getRenderscriptSupportModeEnabled", "setRenderscriptSupportModeEnabled", "renderscriptTargetApi", "getRenderscriptTargetApi", "setRenderscriptTargetApi", "resConfigs", "getResConfigs", "setResConfigs", "resValues", "getResValues", "setResValues", "shaders", "Lcom/android/build/api/dsl/options/ShaderOptions;", "getShaders", "()Lcom/android/build/api/dsl/options/ShaderOptions;", "signingConfig", "Lcom/android/build/api/dsl/options/SigningConfig;", "getSigningConfig", "()Lcom/android/build/api/dsl/options/SigningConfig;", "setSigningConfig", "(Lcom/android/build/api/dsl/options/SigningConfig;)V", "targetSdkVersion", "getTargetSdkVersion", "setTargetSdkVersion", "testCoverageEnabled", "getTestCoverageEnabled", "setTestCoverageEnabled", "testedVariant", "Lcom/android/build/api/dsl/variant/Variant;", "getTestedVariant", "()Lcom/android/build/api/dsl/variant/Variant;", "variantSourceSet", "getVariantSourceSet", "vectorDrawables", "Lcom/android/build/api/dsl/options/VectorDrawablesOptions;", "getVectorDrawables", "()Lcom/android/build/api/dsl/options/VectorDrawablesOptions;", "versionCode", "getVersionCode", "setVersionCode", "versionName", "getVersionName", "setVersionName", "zipAlignEnabled", "getZipAlignEnabled", "setZipAlignEnabled", "", "action", "Lorg/gradle/api/Action;", "buildConfigField", "type", "value", "externalNativeBuild", "isDebuggable", "isEmbedMicroApp", "isJniDebuggable", "isPseudoLocalesEnabled", "isRenderscriptDebuggable", "isTestCoverageEnabled", "isZipAlignEnabled", "resValue", "shaderOptions", "toString", "gradle-core"})
/*    */ public final class AndroidTestVariantShim implements com.android.build.api.dsl.variant.AndroidTestVariant { public void vectorDrawables(@org.jetbrains.annotations.NotNull org.gradle.api.Action<com.android.build.api.dsl.options.VectorDrawablesOptions> action) { kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(action, "action");
/*    */     $$delegate_0.vectorDrawables(action); } public void variantSourceSet(@org.jetbrains.annotations.NotNull org.gradle.api.Action<com.android.build.api.sourcesets.AndroidSourceSet> action) { kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(action, "action");
/*    */     $$delegate_0.variantSourceSet(action); } public void targetSdkVersion(@org.jetbrains.annotations.NotNull String targetSdkVersion) { kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(targetSdkVersion, "targetSdkVersion");
/*    */     $$delegate_0.targetSdkVersion(targetSdkVersion); } public void targetSdkVersion(int targetSdkVersion) { $$delegate_0.targetSdkVersion(targetSdkVersion); } public void shaderOptions(@org.jetbrains.annotations.NotNull org.gradle.api.Action<com.android.build.api.dsl.options.ShaderOptions> action) { kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(action, "action");
/*    */     $$delegate_0.shaderOptions(action); } public void setTargetSdkVersion(@org.jetbrains.annotations.NotNull String targetSdkVersion) { kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(targetSdkVersion, "targetSdkVersion");
/*    */     $$delegate_0.setTargetSdkVersion(targetSdkVersion); } public void setTargetSdkVersion(int targetSdkVersion) { $$delegate_0.setTargetSdkVersion(targetSdkVersion); } public void setMinSdkVersion(@org.jetbrains.annotations.NotNull String minSdkVersion) { kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(minSdkVersion, "minSdkVersion");
/*    */     $$delegate_0.setMinSdkVersion(minSdkVersion); } public void setMinSdkVersion(int minSdkVersion) { $$delegate_0.setMinSdkVersion(minSdkVersion); } public void resValue(@org.jetbrains.annotations.NotNull String type, @org.jetbrains.annotations.NotNull String name, @org.jetbrains.annotations.NotNull String value) { kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(type, "type");
/*    */     kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(name, "name");
/*    */     kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(value, "value");
/*    */     $$delegate_0.resValue(type, name, value); } public void postProcessing(@org.jetbrains.annotations.NotNull org.gradle.api.Action<com.android.build.api.dsl.options.PostProcessingOptions> action) { kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(action, "action");
/*    */     $$delegate_0.postProcessing(action); } public void ndkOptions(@org.jetbrains.annotations.NotNull org.gradle.api.Action<com.android.build.api.dsl.options.NdkOptions> action) { kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(action, "action");
/*    */     $$delegate_0.ndkOptions(action); } public void multiFlavorSourceSet(@org.jetbrains.annotations.NotNull org.gradle.api.Action<com.android.build.api.sourcesets.AndroidSourceSet> action) { kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(action, "action");
/*    */     $$delegate_0.multiFlavorSourceSet(action); } public void minSdkVersion(@org.jetbrains.annotations.NotNull String minSdkVersion) { kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(minSdkVersion, "minSdkVersion");
/*    */     $$delegate_0.minSdkVersion(minSdkVersion); } public void minSdkVersion(int minSdkVersion) { $$delegate_0.minSdkVersion(minSdkVersion); } public void lintOptions(@org.jetbrains.annotations.NotNull org.gradle.api.Action<com.android.build.api.dsl.options.LintOptions> action) { kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(action, "action");
/*    */     $$delegate_0.lintOptions(action); } public void javaCompileOptions(@org.jetbrains.annotations.NotNull org.gradle.api.Action<com.android.build.api.dsl.options.JavaCompileOptions> action) { kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(action, "action");
/*    */     $$delegate_0.javaCompileOptions(action); } /**
/*    */    * @deprecated
/*    */    */
/*    */   @kotlin.Deprecated(message="Use property zipAlignEnabled")
/*    */   public boolean isZipAlignEnabled() { return $$delegate_0.isZipAlignEnabled(); } /**
/*    */    * @deprecated
/*    */    */
/*    */   @kotlin.Deprecated(message="Use property testCoverageEnabled")
/*    */   public boolean isTestCoverageEnabled() { return $$delegate_0.isTestCoverageEnabled(); } /**
/*    */    * @deprecated
/*    */    */
/*    */   @kotlin.Deprecated(message="Use property renderscriptDebuggable")
/*    */   public boolean isRenderscriptDebuggable() { return $$delegate_0.isRenderscriptDebuggable(); } /**
/*    */    * @deprecated
/*    */    */
/*    */   @kotlin.Deprecated(message="Use property pseudoLocalesEnabled")
/*    */   public boolean isPseudoLocalesEnabled() { return $$delegate_0.isPseudoLocalesEnabled(); } /**
/*    */    * @deprecated
/*    */    */
/*    */   @kotlin.Deprecated(message="Use property jniDebuggable")
/*    */   public boolean isJniDebuggable() { return $$delegate_0.isJniDebuggable(); } /**
/*    */    * @deprecated
/*    */    */
/*    */   @kotlin.Deprecated(message="Use property embedMicroApp")
/*    */   public boolean isEmbedMicroApp() { return $$delegate_0.isEmbedMicroApp(); } /**
/*    */    * @deprecated
/*    */    */
/*    */   @kotlin.Deprecated(message="Use property debuggable")
/*    */   public boolean isDebuggable() { return $$delegate_0.isDebuggable(); } public void instrumentationOptions(@org.jetbrains.annotations.NotNull org.gradle.api.Action<com.android.build.api.dsl.options.InstrumentationOptions> action) { kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(action, "action");
/*    */     $$delegate_0.instrumentationOptions(action); } public void externalNativeBuildOptions(@org.jetbrains.annotations.NotNull org.gradle.api.Action<com.android.build.api.dsl.options.ExternalNativeBuildOptions> action) { kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(action, "action");
/*    */     $$delegate_0.externalNativeBuildOptions(action); } public void externalNativeBuild(@org.jetbrains.annotations.NotNull org.gradle.api.Action<com.android.build.api.dsl.options.ExternalNativeBuildOptions> action) { kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(action, "action");
/*    */     $$delegate_0.externalNativeBuild(action); } public void dexOptions(@org.jetbrains.annotations.NotNull org.gradle.api.Action<com.android.build.api.dsl.options.DexOptions> action) { kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(action, "action");
/*    */     $$delegate_0.dexOptions(action); } public void dataBinding(@org.jetbrains.annotations.NotNull org.gradle.api.Action<com.android.builder.model.DataBindingOptions> action) { kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(action, "action");
/*    */     $$delegate_0.dataBinding(action); } public void compileOptions(@org.jetbrains.annotations.NotNull org.gradle.api.Action<com.android.build.api.dsl.options.CompileOptions> action) { kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(action, "action");
/*    */     $$delegate_0.compileOptions(action); } public void buildConfigField(@org.jetbrains.annotations.NotNull String type, @org.jetbrains.annotations.NotNull String name, @org.jetbrains.annotations.NotNull String value) { kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(type, "type");
/*    */     kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(name, "name");
/*    */     kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(value, "value");
/*    */     $$delegate_0.buildConfigField(type, name, value); } public void aaptOptions(@org.jetbrains.annotations.NotNull org.gradle.api.Action<com.android.build.api.dsl.options.AaptOptions> action) { kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(action, "action");
/*    */     $$delegate_0.aaptOptions(action); } public void setZipAlignEnabled(boolean <set-?>) { $$delegate_0.setZipAlignEnabled(<set-?>); } public boolean getZipAlignEnabled() { return $$delegate_0.getZipAlignEnabled(); } public void setVersionName(@org.jetbrains.annotations.Nullable String <set-?>) { $$delegate_0.setVersionName(<set-?>); } @org.jetbrains.annotations.Nullable
/*    */   public String getVersionName() { return $$delegate_0.getVersionName(); } public void setVersionCode(@org.jetbrains.annotations.Nullable Integer <set-?>) { $$delegate_0.setVersionCode(<set-?>); } @org.jetbrains.annotations.Nullable
/*    */   public Integer getVersionCode() { return $$delegate_0.getVersionCode(); } @org.jetbrains.annotations.NotNull
/*    */   public com.android.build.api.dsl.options.VectorDrawablesOptions getVectorDrawables() { return $$delegate_0.getVectorDrawables(); } @org.jetbrains.annotations.Nullable
/*    */   public com.android.build.api.sourcesets.AndroidSourceSet getVariantSourceSet() { return $$delegate_0.getVariantSourceSet(); } @org.jetbrains.annotations.NotNull
/*    */   public com.android.build.api.dsl.variant.Variant getTestedVariant() { return $$delegate_0.getTestedVariant(); } public void setTestCoverageEnabled(boolean <set-?>) { $$delegate_0.setTestCoverageEnabled(<set-?>); } public boolean getTestCoverageEnabled() { return $$delegate_0.getTestCoverageEnabled(); } public void setTargetSdkVersion(@org.jetbrains.annotations.Nullable com.android.build.api.dsl.ApiVersion <set-?>) { $$delegate_0.setTargetSdkVersion(<set-?>); } @org.jetbrains.annotations.Nullable
/*    */   public com.android.build.api.dsl.ApiVersion getTargetSdkVersion() { return $$delegate_0.getTargetSdkVersion(); } public void setSigningConfig(@org.jetbrains.annotations.Nullable com.android.build.api.dsl.options.SigningConfig <set-?>) { $$delegate_0.setSigningConfig(<set-?>); } @org.jetbrains.annotations.Nullable
/*    */   public com.android.build.api.dsl.options.SigningConfig getSigningConfig() { return $$delegate_0.getSigningConfig(); } @org.jetbrains.annotations.NotNull
/*    */   public com.android.build.api.dsl.options.ShaderOptions getShaders() { return $$delegate_0.getShaders(); } public void setResValues(@org.jetbrains.annotations.NotNull java.util.List<com.android.build.api.dsl.model.TypedValue> <set-?>) { kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(<set-?>, "<set-?>");
/*    */     $$delegate_0.setResValues(<set-?>); } @org.jetbrains.annotations.NotNull
/*    */   public java.util.List<com.android.build.api.dsl.model.TypedValue> getResValues() { return $$delegate_0.getResValues(); } public void setResConfigs(@org.jetbrains.annotations.NotNull java.util.List<String> <set-?>) { kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(<set-?>, "<set-?>");
/*    */     $$delegate_0.setResConfigs(<set-?>); } @org.jetbrains.annotations.NotNull
/*    */   public java.util.List<String> getResConfigs() { return $$delegate_0.getResConfigs(); } public void setRenderscriptTargetApi(@org.jetbrains.annotations.Nullable Integer <set-?>) { $$delegate_0.setRenderscriptTargetApi(<set-?>); } @org.jetbrains.annotations.Nullable
/*    */   public Integer getRenderscriptTargetApi() { return $$delegate_0.getRenderscriptTargetApi(); } public void setRenderscriptSupportModeEnabled(@org.jetbrains.annotations.Nullable Boolean <set-?>) { $$delegate_0.setRenderscriptSupportModeEnabled(<set-?>); } @org.jetbrains.annotations.Nullable
/*    */   public Boolean getRenderscriptSupportModeEnabled() { return $$delegate_0.getRenderscriptSupportModeEnabled(); } public void setRenderscriptSupportModeBlasEnabled(@org.jetbrains.annotations.Nullable Boolean <set-?>) { $$delegate_0.setRenderscriptSupportModeBlasEnabled(<set-?>); } @org.jetbrains.annotations.Nullable
/*    */   public Boolean getRenderscriptSupportModeBlasEnabled() { return $$delegate_0.getRenderscriptSupportModeBlasEnabled(); } public void setRenderscriptOptimLevel(int <set-?>) { $$delegate_0.setRenderscriptOptimLevel(<set-?>); } public int getRenderscriptOptimLevel() { return $$delegate_0.getRenderscriptOptimLevel(); } public void setRenderscriptNdkModeEnabled(@org.jetbrains.annotations.Nullable Boolean <set-?>) { $$delegate_0.setRenderscriptNdkModeEnabled(<set-?>); } @org.jetbrains.annotations.Nullable
/*    */   public Boolean getRenderscriptNdkModeEnabled() { return $$delegate_0.getRenderscriptNdkModeEnabled(); } public void setRenderscriptDebuggable(boolean <set-?>) { $$delegate_0.setRenderscriptDebuggable(<set-?>); } public boolean getRenderscriptDebuggable() { return $$delegate_0.getRenderscriptDebuggable(); } public void setPseudoLocalesEnabled(boolean <set-?>) { $$delegate_0.setPseudoLocalesEnabled(<set-?>); } public boolean getPseudoLocalesEnabled() { return $$delegate_0.getPseudoLocalesEnabled(); } @org.jetbrains.annotations.NotNull
/*    */   public com.android.build.api.dsl.options.PostProcessingOptions getPostProcessing() { return $$delegate_0.getPostProcessing(); } @org.jetbrains.annotations.NotNull
/*    */   public com.android.build.api.dsl.options.NdkOptions getNdkOptions() { return $$delegate_0.getNdkOptions(); } @org.jetbrains.annotations.NotNull
/*    */   public String getName() { return $$delegate_0.getName(); } @org.jetbrains.annotations.Nullable
/*    */   public com.android.build.api.sourcesets.AndroidSourceSet getMultiFlavorSourceSet() { return $$delegate_0.getMultiFlavorSourceSet(); } public void setMultiDexKeepProguard(@org.jetbrains.annotations.Nullable java.io.File <set-?>) { $$delegate_0.setMultiDexKeepProguard(<set-?>); } @org.jetbrains.annotations.Nullable
/*    */   public java.io.File getMultiDexKeepProguard() { return $$delegate_0.getMultiDexKeepProguard(); } public void setMultiDexKeepFile(@org.jetbrains.annotations.Nullable java.io.File <set-?>) { $$delegate_0.setMultiDexKeepFile(<set-?>); } @org.jetbrains.annotations.Nullable
/*    */   public java.io.File getMultiDexKeepFile() { return $$delegate_0.getMultiDexKeepFile(); } public void setMultiDexEnabled(@org.jetbrains.annotations.Nullable Boolean <set-?>) { $$delegate_0.setMultiDexEnabled(<set-?>); } @org.jetbrains.annotations.Nullable
/*    */   public Boolean getMultiDexEnabled() { return $$delegate_0.getMultiDexEnabled(); } public void setMinSdkVersion(@org.jetbrains.annotations.Nullable com.android.build.api.dsl.ApiVersion <set-?>) { $$delegate_0.setMinSdkVersion(<set-?>); } @org.jetbrains.annotations.Nullable
/*    */   public com.android.build.api.dsl.ApiVersion getMinSdkVersion() { return $$delegate_0.getMinSdkVersion(); } public void setMaxSdkVersion(@org.jetbrains.annotations.Nullable Integer <set-?>) { $$delegate_0.setMaxSdkVersion(<set-?>); } @org.jetbrains.annotations.Nullable
/*    */   public Integer getMaxSdkVersion() { return $$delegate_0.getMaxSdkVersion(); } public void setManifestPlaceholders(@org.jetbrains.annotations.NotNull java.util.Map<String, Object> <set-?>) { kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(<set-?>, "<set-?>");
/*    */     $$delegate_0.setManifestPlaceholders(<set-?>); } @org.jetbrains.annotations.NotNull
/*    */   public java.util.Map<String, Object> getManifestPlaceholders() { return $$delegate_0.getManifestPlaceholders(); } @org.jetbrains.annotations.NotNull
/*    */   public com.android.build.api.dsl.options.LintOptions getLintOptions() { return $$delegate_0.getLintOptions(); } public void setJniDebuggable(boolean <set-?>) { $$delegate_0.setJniDebuggable(<set-?>); } public boolean getJniDebuggable() { return $$delegate_0.getJniDebuggable(); } @org.jetbrains.annotations.NotNull
/*    */   public com.android.build.api.dsl.options.JavaCompileOptions getJavaCompileOptions() { return $$delegate_0.getJavaCompileOptions(); } @org.jetbrains.annotations.NotNull
/*    */   public com.android.build.api.dsl.options.InstrumentationOptions getInstrumentationOptions() { return $$delegate_0.getInstrumentationOptions(); } @org.jetbrains.annotations.NotNull
/*    */   public java.util.List<String> getFlavorNames() { return $$delegate_0.getFlavorNames(); } @org.jetbrains.annotations.NotNull
/*    */   public com.android.build.api.dsl.options.ExternalNativeBuildOptions getExternalNativeBuildOptions() { return $$delegate_0.getExternalNativeBuildOptions(); } public void setEmbedMicroApp(boolean <set-?>) { $$delegate_0.setEmbedMicroApp(<set-?>); } public boolean getEmbedMicroApp() { return $$delegate_0.getEmbedMicroApp(); } @org.jetbrains.annotations.NotNull
/*    */   public com.android.build.api.dsl.options.DexOptions getDexOptions() { return $$delegate_0.getDexOptions(); } public void setDebuggable(boolean <set-?>) { $$delegate_0.setDebuggable(<set-?>); } public boolean getDebuggable() { return $$delegate_0.getDebuggable(); } @org.jetbrains.annotations.NotNull
/*    */   public com.android.builder.model.DataBindingOptions getDataBinding() { return $$delegate_0.getDataBinding(); } public void setCrunchPngs(boolean <set-?>) { $$delegate_0.setCrunchPngs(<set-?>); } public boolean getCrunchPngs() { return $$delegate_0.getCrunchPngs(); } @org.jetbrains.annotations.NotNull
/*    */   public com.android.build.api.dsl.options.CompileOptions getCompileOptions() { return $$delegate_0.getCompileOptions(); } @org.jetbrains.annotations.NotNull
/*    */   public String getBuildTypeName() { return $$delegate_0.getBuildTypeName(); } public void setBuildConfigFields(@org.jetbrains.annotations.NotNull java.util.List<com.android.build.api.dsl.model.TypedValue> <set-?>) { kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull(<set-?>, "<set-?>");
/*    */     $$delegate_0.setBuildConfigFields(<set-?>); } @org.jetbrains.annotations.NotNull
/*    */   public java.util.List<com.android.build.api.dsl.model.TypedValue> getBuildConfigFields() { return $$delegate_0.getBuildConfigFields(); } @org.jetbrains.annotations.NotNull
/*    */   public java.util.List<com.android.build.api.sourcesets.AndroidSourceSet> getBaseSourceSets() { return $$delegate_0.getBaseSourceSets(); } public void setApplicationId(@org.jetbrains.annotations.Nullable String <set-?>) { $$delegate_0.setApplicationId(<set-?>); } @org.jetbrains.annotations.Nullable
/*    */   public String getApplicationId() { return $$delegate_0.getApplicationId(); } @org.jetbrains.annotations.NotNull
/*    */   public com.android.build.api.dsl.options.AaptOptions getAaptOptions() { return $$delegate_0.getAaptOptions(); } public AndroidTestVariantShim(@org.jetbrains.annotations.NotNull AndroidTestVariantImpl internalObject) { $$delegate_0 = internalObject; }
/*    */   
/*    */   @org.jetbrains.annotations.NotNull
/* 27 */   public String toString() { return getName(); }
/*    */ }

/* Location:
 * Qualified Name:     com.android.build.gradle.internal.api.dsl.variant.AndroidTestVariantShim
 * Java Class Version: 8 (52.0)
 * JD-Core Version:    0.7.1
 */