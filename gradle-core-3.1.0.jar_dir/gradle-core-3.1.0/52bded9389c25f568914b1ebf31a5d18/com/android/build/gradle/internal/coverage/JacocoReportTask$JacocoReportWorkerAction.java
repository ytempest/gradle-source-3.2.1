/*     */ package com.android.build.gradle.internal.coverage;
/*     */ 
/*     */ import com.android.builder.model.Version;
/*     */ import com.google.common.collect.ImmutableList;
/*     */ import com.google.common.io.Closeables;
/*     */ import java.io.File;
/*     */ import java.io.FileInputStream;
/*     */ import java.io.IOException;
/*     */ import java.io.InputStream;
/*     */ import java.io.OutputStream;
/*     */ import java.io.UncheckedIOException;
/*     */ import java.util.Collection;
/*     */ import java.util.List;
/*     */ import java.util.Locale;
/*     */ import javax.inject.Inject;
/*     */ import org.gradle.api.logging.Logger;
/*     */ import org.gradle.api.logging.Logging;
/*     */ import org.jacoco.core.analysis.Analyzer;
/*     */ import org.jacoco.core.analysis.CoverageBuilder;
/*     */ import org.jacoco.core.analysis.IBundleCoverage;
/*     */ import org.jacoco.core.data.ExecutionDataStore;
/*     */ import org.jacoco.core.data.SessionInfoStore;
/*     */ import org.jacoco.core.tools.ExecFileLoader;
/*     */ import org.jacoco.report.DirectorySourceFileLocator;
/*     */ import org.jacoco.report.FileMultiReportOutput;
/*     */ import org.jacoco.report.IReportVisitor;
/*     */ import org.jacoco.report.MultiReportVisitor;
/*     */ import org.jacoco.report.MultiSourceFileLocator;
/*     */ import org.jacoco.report.html.HTMLFormatter;
/*     */ import org.jacoco.report.xml.XMLFormatter;
/*     */ 
/*     */ class JacocoReportTask$JacocoReportWorkerAction
/*     */   implements Runnable
/*     */ {
/* 252 */   private static Logger logger = Logging.getLogger(JacocoReportWorkerAction.class);
/*     */   
/*     */   private List<File> coverageFiles;
/*     */   
/*     */   private File reportDir;
/*     */   
/*     */   private Collection<File> classFolders;
/*     */   
/*     */   private Collection<File> sourceFolders;
/*     */   
/*     */   private int tabWidth;
/*     */   
/*     */   String reportName;
/*     */   
/*     */   @Inject
/*     */   public JacocoReportTask$JacocoReportWorkerAction(List<File> coverageFiles, File reportDir, Collection<File> classFolders, Collection<File> sourceFolders, int tabWidth, String reportName)
/*     */   {
/* 269 */     this.coverageFiles = coverageFiles;
/* 270 */     this.reportDir = reportDir;
/* 271 */     this.classFolders = classFolders;
/* 272 */     this.sourceFolders = sourceFolders;
/* 273 */     this.tabWidth = tabWidth;
/* 274 */     this.reportName = reportName;
/*     */   }
/*     */   
/*     */   public void run()
/*     */   {
/*     */     try {
/* 280 */       generateReport(coverageFiles, reportDir, classFolders, sourceFolders, tabWidth, reportName);
/*     */     }
/*     */     catch (IOException e)
/*     */     {
/* 288 */       throw new UncheckedIOException("Unable to generate Jacoco report", e);
/*     */     }
/*     */   }
/*     */   
/*     */   static void generateReport(List<File> coverageFiles, File reportDir, Collection<File> classFolders, Collection<File> sourceFolders, int tabWidth, String reportName)
/*     */     throws IOException
/*     */   {
/* 302 */     ExecFileLoader loader = new ExecFileLoader();
/* 303 */     for (File coverageFile : coverageFiles) {
/* 304 */       loader.load(coverageFile);
/*     */     }
/*     */     
/* 307 */     SessionInfoStore sessionInfoStore = loader.getSessionInfoStore();
/* 308 */     ExecutionDataStore executionDataStore = loader.getExecutionDataStore();
/*     */     
/* 311 */     HTMLFormatter htmlFormatter = new HTMLFormatter();
/* 312 */     htmlFormatter.setOutputEncoding("UTF-8");
/* 313 */     htmlFormatter.setLocale(Locale.US);
/* 314 */     htmlFormatter.setFooterText("Generated by the Android Gradle plugin " + Version.ANDROID_GRADLE_PLUGIN_VERSION);
/*     */     
/* 318 */     FileMultiReportOutput output = new FileMultiReportOutput(reportDir);
/* 319 */     IReportVisitor htmlReport = htmlFormatter.createVisitor(output);
/*     */     
/* 321 */     XMLFormatter xmlFormatter = new XMLFormatter();
/* 322 */     xmlFormatter.setOutputEncoding("UTF-8");
/* 323 */     OutputStream xmlReportOutput = output.createFile("report.xml");
/*     */     try {
/* 325 */       IReportVisitor xmlReport = xmlFormatter.createVisitor(xmlReportOutput);
/*     */       
/* 328 */       IReportVisitor visitor = new MultiReportVisitor(ImmutableList.of(htmlReport, xmlReport));
/*     */       
/* 331 */       visitor.visitInfo(sessionInfoStore.getInfos(), executionDataStore.getContents());
/*     */       
/* 333 */       CoverageBuilder builder = new CoverageBuilder();
/* 334 */       Analyzer analyzer = new Analyzer(executionDataStore, builder);
/*     */       
/* 336 */       analyzeAll(analyzer, classFolders);
/*     */       
/* 338 */       MultiSourceFileLocator locator = new MultiSourceFileLocator(0);
/* 339 */       for (File folder : sourceFolders) {
/* 340 */         locator.add(new DirectorySourceFileLocator(folder, "UTF-8", tabWidth));
/*     */       }
/*     */       
/* 343 */       IBundleCoverage bundle = builder.getBundle(reportName);
/* 344 */       visitor.visitBundle(bundle, locator);
/* 345 */       visitor.visitEnd(); return;
/*     */     } finally {
/*     */       try {
/* 348 */         xmlReportOutput.close();
/*     */       } catch (IOException e) {
/* 350 */         logger.error("Could not close xml report file", e);
/*     */       }
/*     */     }
/*     */   }
/*     */   
/*     */   private static void analyzeAll(Analyzer analyzer, Collection<File> classFolders)
/*     */     throws IOException
/*     */   {
/* 358 */     for (File folder : classFolders) {
/* 359 */       analyze(analyzer, folder, classFolders);
/*     */     }
/*     */   }
/*     */   
/*     */   private static void analyze(Analyzer analyzer, File file, Collection<File> originalClassFolders)
/*     */     throws IOException
/*     */   {
/* 379 */     if (file.isDirectory()) {
/* 380 */       File[] files = file.listFiles();
/* 381 */       if (files != null) {
/* 382 */         for (File f : files)
/*     */         {
/* 385 */           if (!originalClassFolders.contains(f)) {
/* 386 */             analyze(analyzer, f, originalClassFolders);
/*     */           }
/*     */         }
/*     */       }
/*     */     } else {
/* 391 */       String name = file.getName();
/* 392 */       if ((!name.endsWith(".class")) || 
/* 393 */         (name.equals("R.class")) || 
/* 394 */         (name.startsWith("R$")) || 
/* 395 */         (name.equals("Manifest.class")) || 
/* 396 */         (name.startsWith("Manifest$")) || 
/* 397 */         (name.equals("BuildConfig.class"))) {
/* 398 */         return;
/*     */       }
/*     */       
/* 401 */       Object in = new FileInputStream(file);
/*     */       try {
/* 403 */         analyzer.analyzeClass((InputStream)in, file.getAbsolutePath());
/*     */       } finally {
/* 405 */         Closeables.closeQuietly((InputStream)in);
/*     */       }
/*     */     }
/*     */   }
/*     */ }

/* Location:
 * Qualified Name:     com.android.build.gradle.internal.coverage.JacocoReportTask.JacocoReportWorkerAction
 * Java Class Version: 8 (52.0)
 * JD-Core Version:    0.7.1
 */